pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
function make_tile(x,y)
 local tile = {
  x=x,
  y=y,
  col_amount = rnd(1),
  col = 0 // 0 means no color
 }
  
 if rnd(1) < .4 then
  if rnd(1) < .5 then
   tile.col = 8
  else
   tile.col = 11
  end
 end
  
 return tile
end

tiles = {}
tiles.all = {}
tiles.by_coord = {}

for x=1,10 do
 tiles.by_coord[x] = {}
end
for y=1,10 do
 for x=1,10 do
  local tile = make_tile(x,y)
  tiles.by_coord[x][y] = tile
  add(tiles.all, tile)
 end
end

function _init()
 highlight_moves()
 select_player_tile()
end

function _update60()
 if(btnp(4)) then
  choose_move()
 end
 if(btnp(0)) then
  select_move(selected_index-1)
 end
 if(btnp(1)) then
  select_move(selected_index+1)
 end
 if(btnp(2)) then
  local i=find_higher_move()
  select_move(i)
 end
 if(btnp(3)) then
  local i=find_lower_move()
  select_move(i)
 end
end

function _draw()
 cls()
 pal()
 foreach(tiles.all,function(t)
  if t.selected then
   pal(6,12)
   pal(1,12)
  elseif t.highlighted then
   pal(6,7)
   pal(1,7)
  end
  if t.col > 0 then
   pal(5,t.col)
  end
  spr(1, t.x*8, t.y*8)
  pal()
 end)
 spr(2, player.x*8, player.y*8)
end
-->8
player = {
 x=1,
 y=1
}

selected_move=nil
selected_index=1
function select_move(index)
 if(selected_move) then
  tiles.by_coord[selected_move[1]][selected_move[2]].selected=false
 end
 
 while(index < 1) do
  index += #highlighted_moves
 end
 while(index > #highlighted_moves) do
  index -= #highlighted_moves
 end

 selected_index = index 
 selected_move = highlighted_moves[index]
 tiles.by_coord[selected_move[1]][selected_move[2]].selected=true
end

highlighted_moves={}
function highlight_moves()
 foreach(highlighted_moves,function(move)
  local tile = tiles.by_coord[move[1]][move[2]]
  tile.highlighted = false
 end)
 highlighted_moves=get_moves()
 foreach(highlighted_moves,function(move)  
  local tile = tiles.by_coord[move[1]][move[2]]
  tile.highlighted = true  
 end)
end

function is_valid_move(x,y)
 if x >= 1 and x <= 10 then
  if y >= 1 and y <= 10 then
   return true
  end
 end
 return false
end

function get_moves()
 local moves = {}
 for y=player.y-3,player.y+3 do
  for x=player.x-3,player.x+3 do
   if is_valid_move(x,y) then
    add(moves,{x,y})
   end
  end
 end
 return moves
end

function find_lower_move()
 local found=nil
 for i=selected_index,#highlighted_moves do
  local move = highlighted_moves[i]
  if move[2] > selected_move[2] and move[1] == selected_move[1] then
   return i
  end
 end
 for i=1,selected_index do
  local move = highlighted_moves[i]
  if move[2] < selected_move[2] and move[1] == selected_move[1] then
   return i
  end
 end
 return selected_index
end

function find_higher_move()
 local found=nil
 for i=selected_index,1,-1 do
  local move = highlighted_moves[i]
  if move[2] < selected_move[2] and move[1] == selected_move[1] then
   return i
  end
 end
 for i=#highlighted_moves,selected_index,-1 do
  local move = highlighted_moves[i]
  if move[2] > selected_move[2] and move[1] == selected_move[1] then
   return i
  end
 end
 return selected_index
end

function select_player_tile()
 for i=1,#highlighted_moves do
  local move=highlighted_moves[i]
  if move[1] == player.x and move[2] == player.y then
   select_move(i)
   return
  end
 end
 error_no_move_found()
end

function choose_move()
 player.x=selected_move[1]
 player.y=selected_move[2]
 highlight_moves()
 select_player_tile()
end
__gfx__
00000000565656560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001555555500c77c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700555555560c7cc7c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770001555555507c77c7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770005555555607c77c7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700155555550c7cc7c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005555555600c77c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000151515150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010a000000301003013a35138351363511f351143511335113351273512535134351373513835139351373513435133351253512635126351293512a3512a3512935128351253510030100301003010030100301
